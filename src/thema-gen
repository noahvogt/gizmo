#!/usr/bin/env python3

# import needed gizmo funtions
from gizmo_funtions import *
from gizmo_transforming_functions import *

# read from standard input
stdin_list = stdin()

# import needed packages
import sys
import random

"""
Now this should be an algorithm that takes in a number from the command
line and multiplies the motive by it. Then it randomly runs all this these
copied motives trough a function to create a 'thema'.
"""

# get command line argument
try:
    number = int(sys.argv[1])
    # raise error if number too small
    if number < 1:
        raise ValueError("Number was too small (below 1)")
except (IndexError, ValueError):
    # set fallback value if no or wrong arguments given
    number = 4

# output_list = sequenz(stdin_list, 1)
# motiv_list = verkleinerung(stdin_list)
motiv_list = stdin_list

# create lists
for i in range(number):
    exec("list%s = []" % (str(i)))

# list of indexes from the motive list without repetition
index_list = random.sample(range(0,number), number) 

# list of functions to use
function_list = [
    "verkleinerung(motiv_list)",
    "krebs(motiv_list)",
    "vergrÃ¶sserung(motiv_list)",
    "motiv_list",
    "sequenz(motiv_list, 5)",
    "mirror_pitch(motiv_list)",
    "mirror_rythm(motiv_list)"
    ]

# do not apply "verkleinerung" if the shortest note is 1/16
if '0.25' in return_part(motiv_list, 0):
    function_list.remove("verkleinerung(motiv_list)")

def first_equals_last_pitch(input_list):
    is_same_pitch = not(bool(interval(input_list[0], input_list[-1])))
    return is_same_pitch

"""copy over function_list and start main loop that stops when every post
processing requirement is satified"""

# default values are all all generating 'False' to simulate a 'do while' loop
final_list = ['1.00,D4','1.00,C3']

while not(first_equals_last_pitch(final_list)):
    working_list = function_list
    
    # adjust working_list to the entered number
    if number < len(working_list):
        # if smaller, simply randomize + cut/strip it
        random.shuffle(working_list)
        working_list = working_list[:number]
    elif number > len(working_list):
        for i in range(number-len(working_list)):
            working_list.append(random.choice(working_list))
    
    # randomize the list
    random.shuffle(working_list)
    
    # OPTIONAL: add some post procession here
    
    # now run each item through a list
    for i in range(number):
        exec("list%s = %s" % (str(i),str(working_list[i])))
    
    # append lists
    final_list = []
    for i in range(number):
        exec("final_list.extend(list%s)" % (str(i)))
    
    """
    DEBUG:

    print(len(working_list))
    print(working_list)

    print(final_list)
    print(len(motiv_list))
    unzip_string = "item0"
    for i in range(1, len(motiv_list)):
        unzip_string += ", item%s" % (str(i))
    print(unzip_string)
    exec("for %s in zip(*[iter(final_list)]*%s): print(%s)" % (unzip_string, str(len(motiv_list)), unzip_string))
    print(motiv_list)
    
    print(first_equals_last_pitch(final_list))
    print(interval('1.00C4','1.00C4'))
    """
    
# finally, write to standard output
gizmo_stdout(final_list)
