#!/usr/bin/env python

# import needed gizmo funtions
from gizmo_funtions import *
from gizmo_transforming_functions import *

# read from standard input
stdin_list = stdin()

# import needed packages
import sys
import random

"""
Now this should be an algorithm that takes in a number from the command
line and multiplies the motive by it. Then it randomly runs all this these
copied motives trough a function to create a 'thema'.
"""

args = sys.argv[1:]

# set default values
number = 4
condition_list = [False]

def first_equals_last_pitch(input_list):
    is_same_pitch = not(bool(interval(input_list[0], input_list[-1])))
    return is_same_pitch

active_args = []
# process commandline arguments
if len(args)>0:
    if "-fl" in args:
        condition_list.append(False)
        active_args.append('first_equals_last_pitch')
    if ("-n" in args) or ("--number" in args):
        try:
            # get number
            if "-n" in args:
                entered_number = int(args[args.index("-n")+1])
            else:
                entered_number = int(args[args.index("--number")+1])
            # exit if wrong form entered
            if entered_number > 0:
                number = entered_number
            else:
                raise ValueError("Error: Please give an integer bigger than 0.")
        except (ValueError, IndexError):
            print("Error: Please give an integer bigger than 0.")
            exit()
    if ("-h" in args) or ( "--help" in args):
        # exit and display help message
        print("Usage: thema-gen [options] [< input file]\n\n\
Options:\n\
     -fl\t\tthe first and last pitch have to be same\n\
     -h, --help\t\tprint this help message")
        exit()


motiv_list = stdin_list

# create lists
for i in range(number):
    exec("list%s = []" % (str(i)))

# list of indexes from the motive list without repetition
index_list = random.sample(range(0,number), number)

# list of functions to use
function_list = [
    "verkleinerung(motiv_list)",
    "krebs(motiv_list)",
    "vergrÃ¶sserung(motiv_list)",
    "motiv_list",
    "sequenz(motiv_list, 5)",
    "mirror_pitch(motiv_list)",
    "mirror_rythm(motiv_list)"
    ]

# do not apply "verkleinerung" if the shortest note is 1/16
if '0.25' in return_part(motiv_list, 0):
    function_list.remove("verkleinerung(motiv_list)")

"""copy over function_list and start main loop that stops when every post
processing requirement is satified"""

# default values are all all generating 'False' to simulate a 'do while' loop
final_list = ['1.00,D4','1.00,C3']

while not all(condition_list):
    # set first value to true (this is to simale a do while loop)
    condition_list[0] = True

    working_list = function_list

    # adjust working_list to the entered number
    if number < len(working_list):
        # if smaller, simply randomize + cut/strip it
        random.shuffle(working_list)
        working_list = working_list[:number]
    elif number > len(working_list):
        for i in range(number-len(working_list)):
            working_list.append(random.choice(working_list))

    # randomize the list
    random.shuffle(working_list)

    # OPTIONAL: add some post procession here

    # now run each item through a list
    for i in range(number):
        exec("list%s = %s" % (str(i),str(working_list[i])))

    # append lists
    final_list = []
    for i in range(number):
        exec("final_list.extend(list%s)" % (str(i)))

    if "-fl" in args:
        if first_equals_last_pitch(final_list) and 'first_equals_last_pitch' in active_args:
            condition_list[condition_list.index(False)] = True
            active_args.remove('first_equals_last_pitch')

"""
DEBUG:

print(len(working_list))
print(working_list)

print(final_list)
print(len(motiv_list))
unzip_string = "item0"
for i in range(1, len(motiv_list)):
    unzip_string += ", item%s" % (str(i))
print(unzip_string)
exec("for %s in zip(*[iter(final_list)]*%s): print(%s)" % (unzip_string, str(len(motiv_list)), unzip_string))
print(motiv_list)

print(first_equals_last_pitch(final_list))
print(interval('1.00C4','1.00C4'))
"""

# finally, write to standard output
gizmo_stdout(final_list)
